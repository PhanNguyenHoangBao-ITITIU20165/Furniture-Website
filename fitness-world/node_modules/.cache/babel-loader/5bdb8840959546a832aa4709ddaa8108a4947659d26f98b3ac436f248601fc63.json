{"ast":null,"code":"var _jsxFileName = \"D:\\\\Furniture-Website\\\\furniture-world\\\\src\\\\components\\\\userComponents\\\\dataTable\\\\DataTable.tsx\";\nimport { Badge, Spin, Table } from 'antd';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrderDataTable = ({\n  orderData\n}) => {\n  const expandedRowRender = row => {\n    const columns = [{\n      title: 'Image',\n      dataIndex: 'img',\n      key: 'image',\n      render: (text, record) => record.image_dir ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: record.image_dir,\n        alt: record.product,\n        style: {\n          width: '50px',\n          height: '50px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }, this),\n      width: 200\n    }, {\n      title: 'Product',\n      dataIndex: 'product',\n      key: 'product',\n      width: 200\n    }, {\n      title: 'Category',\n      dataIndex: 'category',\n      key: 'category',\n      width: 150,\n      filters: [{\n        text: 'Dining Room',\n        value: 'Dining Room'\n      }, {\n        text: 'Kitchen',\n        value: 'Kitchen'\n      }, {\n        text: 'Bedroom',\n        value: 'Bedroom'\n      }, {\n        text: 'Office',\n        value: 'Office'\n      }, {\n        text: 'Living Room',\n        value: 'Living Room'\n      }],\n      onFilter: (value, record) => record.category.indexOf(value) === 0\n    }, {\n      title: 'Quantity',\n      width: 150,\n      dataIndex: 'quantity',\n      key: 'quantity',\n      sorter: (a, b) => a.quantity - b.quantity\n    }, {\n      title: 'Unit Price',\n      dataIndex: 'unitPrice',\n      key: 'unitPrice',\n      width: 150,\n      render: text => `$${text}`,\n      sorter: (a, b) => a.unitPrice - b.unitPrice\n    }];\n    const data = orderData[row.key].products;\n    return /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSource: data,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 16\n    }, this);\n  };\n  const columns = [{\n    title: 'Id',\n    dataIndex: 'id',\n    key: 'id',\n    width: 200\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    width: 100,\n    key: 'status',\n    render: record => {\n      let statusText = '';\n      let statusColor = undefined;\n      switch (record) {\n        case 'Success':\n          statusText = 'Success';\n          statusColor = 'success';\n          break;\n        case 'pending':\n          statusText = 'Pending';\n          statusColor = 'warning';\n          break;\n      }\n      return /*#__PURE__*/_jsxDEV(Badge, {\n        status: statusColor,\n        text: statusText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 24\n      }, this);\n    },\n    filters: [{\n      text: 'Pending',\n      value: 'pending'\n    }, {\n      text: 'Success',\n      value: 'success'\n    }],\n    onFilter: (value, record) => record.status.indexOf(value) === 0\n  }, {\n    title: 'Total price',\n    dataIndex: 'totalPrice',\n    key: 'totalPrice',\n    width: 150,\n    render: text => `$${text}`,\n    sorter: (a, b) => Number(a.totalPrice.replace('$', '')) - Number(b.totalPrice.replace('$', ''))\n  }, {\n    title: 'Payment',\n    dataIndex: 'payment',\n    key: 'payment',\n    width: 150,\n    filters: [{\n      text: 'cash',\n      value: 'cash'\n    }, {\n      text: 'banking',\n      value: 'banking'\n    }],\n    onFilter: (value, record) => record.payment.indexOf(value) === 0\n  }, {\n    title: 'Date',\n    dataIndex: 'createdAt',\n    width: 200,\n    key: 'date',\n    sorter: (a, b) => {\n      const convertToDate = y => {\n        const [time, date] = y.split(' - ');\n        const [hour, minute] = time.split(':').map(Number);\n        const [day, month, year] = date.split('/').map(Number);\n        return new Date(year, month - 1, day, hour, minute).getTime();\n      };\n      return convertToDate(a.createdAt) - convertToDate(b.createdAt);\n    }\n  }];\n  const data = [];\n  orderData.map((order, index) => {\n    data.push({\n      key: index,\n      id: order.id,\n      status: order.status,\n      totalPrice: String(order.total),\n      payment: order.payment,\n      createdAt: order.createdAt\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    bordered: true,\n    columns: columns,\n    expandable: {\n      expandedRowRender\n    },\n    dataSource: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 12\n  }, this);\n};\n_c = OrderDataTable;\nvar _c;\n$RefreshReg$(_c, \"OrderDataTable\");","map":{"version":3,"names":["Badge","Spin","Table","React","jsxDEV","_jsxDEV","OrderDataTable","orderData","expandedRowRender","row","columns","title","dataIndex","key","render","text","record","image_dir","src","alt","product","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","filters","value","onFilter","category","indexOf","sorter","a","b","quantity","unitPrice","data","products","dataSource","pagination","statusText","statusColor","undefined","status","Number","totalPrice","replace","payment","convertToDate","y","time","date","split","hour","minute","map","day","month","year","Date","getTime","createdAt","order","index","push","id","String","total","bordered","expandable","_c","$RefreshReg$"],"sources":["D:/Furniture-Website/furniture-world/src/components/userComponents/dataTable/DataTable.tsx"],"sourcesContent":["import { Badge, Spin, Table, TableColumnsType } from 'antd';\r\nimport React from 'react';\r\nimport { IOrder, IProductOrder } from 'src/redux/order/orderSlice';\r\n\r\ntype Props = {};\r\n\r\ninterface IOrderTableAttribute {\r\n    key: number;\r\n    id: string;\r\n    status: string;\r\n    totalPrice: string;\r\n    payment: string;\r\n    createdAt: string;\r\n}\r\n\r\nexport const OrderDataTable = ({ orderData }: { orderData: IOrder[] }) => {\r\n    const expandedRowRender = (row: IOrderTableAttribute) => {\r\n        const columns: TableColumnsType<IProductOrder> = [\r\n            {\r\n                title: 'Image',\r\n                dataIndex: 'img',\r\n                key: 'image',\r\n                render: (text, record) =>\r\n                    record.image_dir ? (\r\n                        <img src={record.image_dir} alt={record.product} style={{ width: '50px', height: '50px' }} />\r\n                    ) : (\r\n                        <Spin />\r\n                    ),\r\n                width: 200,\r\n            },\r\n            { title: 'Product', dataIndex: 'product', key: 'product', width: 200 },\r\n            {\r\n                title: 'Category',\r\n                dataIndex: 'category',\r\n                key: 'category',\r\n                width: 150,\r\n                filters: [\r\n                    {\r\n                        text: 'Dining Room',\r\n                        value: 'Dining Room',\r\n                    },\r\n                    {\r\n                        text: 'Kitchen',\r\n                        value: 'Kitchen',\r\n                    },\r\n                    {\r\n                        text: 'Bedroom',\r\n                        value: 'Bedroom',\r\n                    },\r\n                    {\r\n                        text: 'Office',\r\n                        value: 'Office',\r\n                    },\r\n                    {\r\n                        text: 'Living Room',\r\n                        value: 'Living Room',\r\n                    },\r\n                ],\r\n                onFilter: (value, record) => record.category.indexOf(value as string) === 0,\r\n            },\r\n            {\r\n                title: 'Quantity',\r\n                width: 150,\r\n                dataIndex: 'quantity',\r\n                key: 'quantity',\r\n                sorter: (a, b) => a.quantity - b.quantity,\r\n            },\r\n            {\r\n                title: 'Unit Price',\r\n                dataIndex: 'unitPrice',\r\n                key: 'unitPrice',\r\n                width: 150,\r\n                render: (text) => `$${text}`,\r\n                sorter: (a, b) => a.unitPrice - b.unitPrice,\r\n            },\r\n        ];\r\n\r\n        const data: IProductOrder[] = orderData[row.key].products;\r\n        return <Table columns={columns} dataSource={data} pagination={false} />;\r\n    };\r\n\r\n    const columns: TableColumnsType<IOrderTableAttribute> = [\r\n        { title: 'Id', dataIndex: 'id', key: 'id', width: 200 },\r\n\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            width: 100,\r\n            key: 'status',\r\n            render: (record) => {\r\n                let statusText = '';\r\n                let statusColor: 'success' | 'warning' | 'default' | 'processing' | 'error' | undefined = undefined;\r\n\r\n                switch (record) {\r\n                    case 'Success':\r\n                        statusText = 'Success';\r\n                        statusColor = 'success';\r\n                        break;\r\n                    case 'pending':\r\n                        statusText = 'Pending';\r\n                        statusColor = 'warning';\r\n                        break;\r\n                }\r\n                return <Badge status={statusColor} text={statusText} />;\r\n            },\r\n            filters: [\r\n                { text: 'Pending', value: 'pending' },\r\n                { text: 'Success', value: 'success' },\r\n            ],\r\n            onFilter: (value, record) => record.status.indexOf(value as string) === 0,\r\n        },\r\n        {\r\n            title: 'Total price',\r\n            dataIndex: 'totalPrice',\r\n            key: 'totalPrice',\r\n            width: 150,\r\n            render: (text) => `$${text}`,\r\n            sorter: (a, b) => Number(a.totalPrice.replace('$', '')) - Number(b.totalPrice.replace('$', '')),\r\n        },\r\n        {\r\n            title: 'Payment',\r\n            dataIndex: 'payment',\r\n            key: 'payment',\r\n            width: 150,\r\n            filters: [\r\n                { text: 'cash', value: 'cash' },\r\n                { text: 'banking', value: 'banking' },\r\n            ],\r\n            onFilter: (value, record) => record.payment.indexOf(value as string) === 0,\r\n        },\r\n        {\r\n            title: 'Date',\r\n            dataIndex: 'createdAt',\r\n            width: 200,\r\n            key: 'date',\r\n            sorter: (a, b) => {\r\n                const convertToDate = (y: string) => {\r\n                    const [time, date] = y.split(' - ');\r\n                    const [hour, minute] = time.split(':').map(Number);\r\n                    const [day, month, year] = date.split('/').map(Number);\r\n                    return new Date(year, month - 1, day, hour, minute).getTime();\r\n                };\r\n\r\n                return convertToDate(a.createdAt) - convertToDate(b.createdAt);\r\n            },\r\n        },\r\n    ];\r\n\r\n    const data: IOrderTableAttribute[] = [];\r\n\r\n    orderData.map((order, index) => {\r\n        data.push({\r\n            key: index,\r\n            id: order.id,\r\n            status: order.status,\r\n            totalPrice: String(order.total),\r\n            payment: order.payment,\r\n            createdAt: order.createdAt,\r\n        });\r\n    });\r\n\r\n    return <Table bordered columns={columns} expandable={{ expandedRowRender }} dataSource={data} />;\r\n};\r\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,IAAI,EAAEC,KAAK,QAA0B,MAAM;AAC3D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAc1B,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAmC,CAAC,KAAK;EACtE,MAAMC,iBAAiB,GAAIC,GAAyB,IAAK;IACrD,MAAMC,OAAwC,GAAG,CAC7C;MACIC,KAAK,EAAE,OAAO;MACdC,SAAS,EAAE,KAAK;MAChBC,GAAG,EAAE,OAAO;MACZC,MAAM,EAAEA,CAACC,IAAI,EAAEC,MAAM,KACjBA,MAAM,CAACC,SAAS,gBACZZ,OAAA;QAAKa,GAAG,EAAEF,MAAM,CAACC,SAAU;QAACE,GAAG,EAAEH,MAAM,CAACI,OAAQ;QAACC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAE7FtB,OAAA,CAACJ,IAAI;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACV;MACLL,KAAK,EAAE;IACX,CAAC,EACD;MAAEX,KAAK,EAAE,SAAS;MAAEC,SAAS,EAAE,SAAS;MAAEC,GAAG,EAAE,SAAS;MAAES,KAAK,EAAE;IAAI,CAAC,EACtE;MACIX,KAAK,EAAE,UAAU;MACjBC,SAAS,EAAE,UAAU;MACrBC,GAAG,EAAE,UAAU;MACfS,KAAK,EAAE,GAAG;MACVM,OAAO,EAAE,CACL;QACIb,IAAI,EAAE,aAAa;QACnBc,KAAK,EAAE;MACX,CAAC,EACD;QACId,IAAI,EAAE,SAAS;QACfc,KAAK,EAAE;MACX,CAAC,EACD;QACId,IAAI,EAAE,SAAS;QACfc,KAAK,EAAE;MACX,CAAC,EACD;QACId,IAAI,EAAE,QAAQ;QACdc,KAAK,EAAE;MACX,CAAC,EACD;QACId,IAAI,EAAE,aAAa;QACnBc,KAAK,EAAE;MACX,CAAC,CACJ;MACDC,QAAQ,EAAEA,CAACD,KAAK,EAAEb,MAAM,KAAKA,MAAM,CAACe,QAAQ,CAACC,OAAO,CAACH,KAAe,CAAC,KAAK;IAC9E,CAAC,EACD;MACIlB,KAAK,EAAE,UAAU;MACjBW,KAAK,EAAE,GAAG;MACVV,SAAS,EAAE,UAAU;MACrBC,GAAG,EAAE,UAAU;MACfoB,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,QAAQ,GAAGD,CAAC,CAACC;IACrC,CAAC,EACD;MACIzB,KAAK,EAAE,YAAY;MACnBC,SAAS,EAAE,WAAW;MACtBC,GAAG,EAAE,WAAW;MAChBS,KAAK,EAAE,GAAG;MACVR,MAAM,EAAGC,IAAI,IAAM,IAAGA,IAAK,EAAC;MAC5BkB,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACG,SAAS,GAAGF,CAAC,CAACE;IACtC,CAAC,CACJ;IAED,MAAMC,IAAqB,GAAG/B,SAAS,CAACE,GAAG,CAACI,GAAG,CAAC,CAAC0B,QAAQ;IACzD,oBAAOlC,OAAA,CAACH,KAAK;MAACQ,OAAO,EAAEA,OAAQ;MAAC8B,UAAU,EAAEF,IAAK;MAACG,UAAU,EAAE;IAAM;MAAAjB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3E,CAAC;EAED,MAAMjB,OAA+C,GAAG,CACpD;IAAEC,KAAK,EAAE,IAAI;IAAEC,SAAS,EAAE,IAAI;IAAEC,GAAG,EAAE,IAAI;IAAES,KAAK,EAAE;EAAI,CAAC,EAEvD;IACIX,KAAK,EAAE,QAAQ;IACfC,SAAS,EAAE,QAAQ;IACnBU,KAAK,EAAE,GAAG;IACVT,GAAG,EAAE,QAAQ;IACbC,MAAM,EAAGE,MAAM,IAAK;MAChB,IAAI0B,UAAU,GAAG,EAAE;MACnB,IAAIC,WAAmF,GAAGC,SAAS;MAEnG,QAAQ5B,MAAM;QACV,KAAK,SAAS;UACV0B,UAAU,GAAG,SAAS;UACtBC,WAAW,GAAG,SAAS;UACvB;QACJ,KAAK,SAAS;UACVD,UAAU,GAAG,SAAS;UACtBC,WAAW,GAAG,SAAS;UACvB;MACR;MACA,oBAAOtC,OAAA,CAACL,KAAK;QAAC6C,MAAM,EAAEF,WAAY;QAAC5B,IAAI,EAAE2B;MAAW;QAAAlB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAC3D,CAAC;IACDC,OAAO,EAAE,CACL;MAAEb,IAAI,EAAE,SAAS;MAAEc,KAAK,EAAE;IAAU,CAAC,EACrC;MAAEd,IAAI,EAAE,SAAS;MAAEc,KAAK,EAAE;IAAU,CAAC,CACxC;IACDC,QAAQ,EAAEA,CAACD,KAAK,EAAEb,MAAM,KAAKA,MAAM,CAAC6B,MAAM,CAACb,OAAO,CAACH,KAAe,CAAC,KAAK;EAC5E,CAAC,EACD;IACIlB,KAAK,EAAE,aAAa;IACpBC,SAAS,EAAE,YAAY;IACvBC,GAAG,EAAE,YAAY;IACjBS,KAAK,EAAE,GAAG;IACVR,MAAM,EAAGC,IAAI,IAAM,IAAGA,IAAK,EAAC;IAC5BkB,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKW,MAAM,CAACZ,CAAC,CAACa,UAAU,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAGF,MAAM,CAACX,CAAC,CAACY,UAAU,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EAClG,CAAC,EACD;IACIrC,KAAK,EAAE,SAAS;IAChBC,SAAS,EAAE,SAAS;IACpBC,GAAG,EAAE,SAAS;IACdS,KAAK,EAAE,GAAG;IACVM,OAAO,EAAE,CACL;MAAEb,IAAI,EAAE,MAAM;MAAEc,KAAK,EAAE;IAAO,CAAC,EAC/B;MAAEd,IAAI,EAAE,SAAS;MAAEc,KAAK,EAAE;IAAU,CAAC,CACxC;IACDC,QAAQ,EAAEA,CAACD,KAAK,EAAEb,MAAM,KAAKA,MAAM,CAACiC,OAAO,CAACjB,OAAO,CAACH,KAAe,CAAC,KAAK;EAC7E,CAAC,EACD;IACIlB,KAAK,EAAE,MAAM;IACbC,SAAS,EAAE,WAAW;IACtBU,KAAK,EAAE,GAAG;IACVT,GAAG,EAAE,MAAM;IACXoB,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd,MAAMe,aAAa,GAAIC,CAAS,IAAK;QACjC,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAGF,CAAC,CAACG,KAAK,CAAC,KAAK,CAAC;QACnC,MAAM,CAACC,IAAI,EAAEC,MAAM,CAAC,GAAGJ,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACG,GAAG,CAACX,MAAM,CAAC;QAClD,MAAM,CAACY,GAAG,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAGP,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACG,GAAG,CAACX,MAAM,CAAC;QACtD,OAAO,IAAIe,IAAI,CAACD,IAAI,EAAED,KAAK,GAAG,CAAC,EAAED,GAAG,EAAEH,IAAI,EAAEC,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MACjE,CAAC;MAED,OAAOZ,aAAa,CAAChB,CAAC,CAAC6B,SAAS,CAAC,GAAGb,aAAa,CAACf,CAAC,CAAC4B,SAAS,CAAC;IAClE;EACJ,CAAC,CACJ;EAED,MAAMzB,IAA4B,GAAG,EAAE;EAEvC/B,SAAS,CAACkD,GAAG,CAAC,CAACO,KAAK,EAAEC,KAAK,KAAK;IAC5B3B,IAAI,CAAC4B,IAAI,CAAC;MACNrD,GAAG,EAAEoD,KAAK;MACVE,EAAE,EAAEH,KAAK,CAACG,EAAE;MACZtB,MAAM,EAAEmB,KAAK,CAACnB,MAAM;MACpBE,UAAU,EAAEqB,MAAM,CAACJ,KAAK,CAACK,KAAK,CAAC;MAC/BpB,OAAO,EAAEe,KAAK,CAACf,OAAO;MACtBc,SAAS,EAAEC,KAAK,CAACD;IACrB,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,oBAAO1D,OAAA,CAACH,KAAK;IAACoE,QAAQ;IAAC5D,OAAO,EAAEA,OAAQ;IAAC6D,UAAU,EAAE;MAAE/D;IAAkB,CAAE;IAACgC,UAAU,EAAEF;EAAK;IAAAd,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpG,CAAC;AAAC6C,EAAA,GAnJWlE,cAAc;AAAA,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}